{"version":3,"sources":["webpack:///./src/pages/01-prereq/crc_installation.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineNotification","Tabs","Tab","Row","Column","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","label","isMDXComponent"],"mappings":"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","file":"component---src-pages-01-prereq-crc-installation-mdx-edd0a912a9926e79b36b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/spm-kubernetes/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst Row = makeShortcode(\"Row\");\nconst Column = makeShortcode(\"Column\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`What is CRC?`}</h2>\n    <p>{`CodeReady Containers is a minimal, preconfigured OpenShift 4.1 cluster designed to run on your local workstation as a development environment for OpenShift is `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/code-ready/crc\"\n      }}>{`CodeReady Containers`}</a>{` (CRC)`}</p>\n    <p>{`Similar to Minikube in concept, CRC provides a cloud like environment locally, to create and deploy an OpenShift cluster for development and testing purposes.`}</p>\n    <p>{`Here, we will cover some common CRC operations, including deploying SPM to the CRC environment. We will be using the same helm charts produced in the previous `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/04-deployment/hc_deployment\"\n      }}>{`Preparing Helm charts`}</a>{` section.`}</p>\n    <p>{`A full getting started guide for CRC can be found at `}<a parentName=\"p\" {...{\n        \"href\": \"https://access.redhat.com/documentation/en-us/red_hat_codeready_containers/1.8/html/getting_started_guide/index\"\n      }}>{`this link`}</a></p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{`  Cúram SPM does not provide official support of OpenShift. All the references to OpenShift and CRC should be considered as an Early Adopter Release.`}</p>\n    </InlineNotification>\n    <p><strong parentName=\"p\">{`System Requirements`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Detailed system requirements can be found `}<a parentName=\"li\" {...{\n          \"href\": \"https://code-ready.github.io/crc/#minimum-system-requirements_gsg\"\n        }}>{`in the CRC documentation`}</a>{`.\nCRC needs to be able to allocate a minimum of 9GB RAM to its VM.\nIt is recommended your workstation have at least 16GB to operate, some workloads may require more.`}</li>\n    </ul>\n    <h2>{`Installation of CRC`}</h2>\n    <p>{`You will need to create an account at `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.redhat.com/\"\n      }}>{`RedHat Cloud`}</a>{`.`}</p>\n    <p>{`Create a `}<inlineCode parentName=\"p\">{`$CRC_HOME`}</inlineCode>{` folder to use for the purposes of the installation.\nDownload the installation archive from `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.redhat.com/openshift/install/crc/installer-provisioned\"\n      }}>{`latest release`}</a>{` to `}<inlineCode parentName=\"p\">{`$CRC_HOME`}</inlineCode>{` and extract the archive.\nOn the same page download your pull secret to `}<inlineCode parentName=\"p\">{`$CRC_HOME`}</inlineCode>{`. At the time of writing the `}<inlineCode parentName=\"p\">{`latest release`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`1.10.0`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`tar -xvf crc-macos-amd64.tar.xz\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{`  Here we have two options, add the binary to the `}<inlineCode parentName=\"p\">{`PATH`}</inlineCode>{` environment variable, or move it to `}<inlineCode parentName=\"p\">{`/usr/local/bin/`}</inlineCode></p>\n    </InlineNotification>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Add to the PATH\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <p><inlineCode parentName=\"p\">{`export PATH=$CRC_HOME/crc-macos-1.10.0-amd64:$PATH`}</inlineCode></p>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"/usr/bin/local \" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <p><inlineCode parentName=\"p\">{`mv $CRC_HOME/crc-macos-1.10.0-amd64/crc /usr/local/bin`}</inlineCode></p>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <p>{`Whichever option you choose, you should now have crc in your executable path, to test this run:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc version\n`}</code></pre>\n    <p>{`The output should be similar to:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`crc version: 1.10.0+9025021\nOpenShift version: 4.4.3 (embedded in binary)\n`}</code></pre>\n    <h2>{`Setting up CRC`}</h2>\n    <p>{`The first step is to configure the prerequisites for the OpenShift cluster, including taking control of your hosts and resolver files to provide access to the CRC cluster.\nTo do this run the following command, providing the workstation administrator password as required.\nThis procedure will also create the ~/.crc directory if it does not already exist.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc setup\n`}</code></pre>\n    <p>{`Now that the basic configuration is complete, we can edit the configuration further to change the memory limit and add the path to the pull secret file downloaded previously.\nWe will also set the cpus to 6:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc config set memory 32768\ncrc config set cpus 6\ncrc config set pull-secret-file $CRC_HOME/pull-secret.txt\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{`  While CRC’s minimum memory allocation requirement is 8GB, only a single replica Curam deployment can be achieved using this.\nWe suggest you allocate as many resources as available.\nThe greater the workload the greater the memory and processor requirements.\nAny changes to the crc config require you to delete the cluster and start a new one.`}</p>\n    </InlineNotification>\n    <p>{`You can always check the configured options of ’crc’ with:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc config view\n`}</code></pre>\n    <p>{`After setup is complete, the cluster could be started with 6 CPUs.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc start\n`}</code></pre>\n    <p>{`This will output something similar to:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`level=info msg=\"Checking if oc binary is cached\"\n...\n...\n...\nlevel=info msg=\"To access the cluster, first set up your environment by following 'crc oc-env' instructions\"\nlevel=info msg=\"Then you can access it by running 'oc login -u developer -p developer https://api.crc.testing:6443'\"\nlevel=info msg=\"To login as an admin, run 'oc login -u kubeadmin -p YourPassWordHere https://api.crc.testing:6443'\"\n...\n...\n`}</code></pre>\n    <p>{`Please note the `}<inlineCode parentName=\"p\">{`kubeadmin`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`developer`}</inlineCode>{` credentials for later use.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{`  For the rest of the guide you can substitute the credentials you received when you started your cluster for $KUBEADMN_PSWD and $KUBEDEVEL_PSWD.\nAlternatively these credentials will be returned by the `}<inlineCode parentName=\"p\">{`crc console --credentials`}</inlineCode>{` commands.\nThis guide will be using $KUBEDEVEL_PSWD and $KUBEADMN_PSWD environment variables.\nYou may find it convenient to to the same, so you can copy and paste commands without having to switch values:`}</p>\n      <p><inlineCode parentName=\"p\">{`export KUBEADMN_PSWD=yourKubeAdminPassword`}</inlineCode></p>\n      <p><inlineCode parentName=\"p\">{`export KUBEDEVEL_PSWD=yourKubeDeveloperPassword`}</inlineCode></p>\n    </InlineNotification>\n    <p>{`Next we will set up the OpenShift Client `}<inlineCode parentName=\"p\">{`oc`}</inlineCode>{` which is used to administer the CRC cluster by running the following two commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc oc-env\neval $(crc oc-env)\n`}</code></pre>\n    <p>{`If required, you can stop the cluster using:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc stop\n`}</code></pre>\n    <p>{`Or delete it using:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`crc delete\n`}</code></pre>\n    <h2>{`Creating a CRC project`}</h2>\n    <p>{`We will create a project for our SPM deployment, again we will use an environment variable for added convenience when following the guide.`}</p>\n    <p>{`Create the environment variable, you can set to value to anything you like, but it should consist of lower case alphanumeric characters or ’-’, and must start and end with an alphanumeric character (e.g. ‘my-name’,  or ‘123-abc”):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`export releasename=\"spm-deploy\"\n`}</code></pre>\n    <p>{`Login as kubeadmin:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`oc login -u kubeadmin -p $KUBEADMN_PSWD https://api.crc.testing:6443\n`}</code></pre>\n    <p>{`Create the project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`oc adm new-project $releasename\n`}</code></pre>\n    <p>{`And switch kubernetes context to the new project:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kubectl config set-context --current --namespace $releasename\n`}</code></pre>\n    <h2>{`Deployment Process`}</h2>\n    <p>{`Creation of a Security Context Constraint (SCC).\nThis SCC allows DB2 and MQ images to run as they require certain permissions, which are by default blocked in OpenShift.`}</p>\n    <p>{`We have provided a shell script to configure the SCC, located at `}<inlineCode parentName=\"p\">{`$SPM_HOME/helm-charts/spm/prereqs`}</inlineCode>{` apply the policy by running the script as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/helm-charts/spm/prereqs\n./createSCC.sh -n $releasename\n`}</code></pre>\n    <p>{`Enable the Image Registry default route`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`oc patch configs.imageregistry.operator.openshift.io/cluster --type merge -p '{\"spec\":{\"defaultRoute\":true}}'\n\n`}</code></pre>\n    <p>{`Add relevant roles to user`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`oc get pods -n openshift-image-registry\noc policy add-role-to-user registry-viewer kube:admin\noc adm policy add-cluster-role-to-user registry-viewer kube:admin\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{`  This will overwrite any existing policy with the same name.`}</p>\n      <p>{`If policy already exists, add system:serviceaccount:\\${releasename}:default to the users array in the policy by editing the policy YAML or running the command below:`}</p>\n      <p><inlineCode parentName=\"p\">{`oc adm policy add-scc-to-user spm-dev-scc -z system:serviceaccount:\\${releasename}:default`}</inlineCode></p>\n    </InlineNotification>\n    <p>{`Once ran, you can verify that the SCC for SPM has been created:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`kubectl get scc\nNAME               AGE\nanyuid             1d\nhostaccess         1d\nhostmount-anyuid   1d\nhostnetwork        1d\nnode-exporter      1d\nnonroot            1d\nprivileged         1d\nrestricted         1d\nspm-dev-scc        1m\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}