{"version":3,"sources":["webpack:///./src/pages/03-build-images/build_images.mdx"],"names":["name","_frontmatter","InlineNotification","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-03-build-images-build-images-mdx-3813da257da4acc4450c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/spm-kubernetes/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Now that all the elements are in place, build the images as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`We will use a `}<inlineCode parentName=\"p\">{`$DOCKER_REGISTRY`}</inlineCode>{` for the commands below. Please select based on the container environment you are deploying.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`CRC will be `}<inlineCode parentName=\"li\">{`default-route-openshift-image-registry.apps-crc.testing`}</inlineCode></li>\n          <li parentName=\"ul\">{`Minikube will be `}<inlineCode parentName=\"li\">{`minikube.local:5000`}</inlineCode></li>\n          <li parentName=\"ul\">{`IKS will be `}<inlineCode parentName=\"li\">{`us.icr.io`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To build the XML server image, run the following commands:`}</p>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/*\\\\n!content/release-stage/CuramSDEJ/xmlserver' > .dockerignore\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/xmlserver:latest \\\\\n     --file XMLServer.Dockerfile .\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To build the batch image, run the following commands:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/batch:latest \\\\\n     --file Batch.Dockerfile .\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To build the application image, run the following commands for each of the applications (EAR files) needed:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/*\\\\n!content/release-stage/build\\\\n!content/release-stage/ear\\\\n!content/release-stage/CuramSDEJ' > .dockerignore\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/curam:latest \\\\\n     --file EAR.Dockerfile \\\\\n     --build-arg MQ_RA_LICENSE=--acceptLicense \\\\\n     --build-arg EAR_NAME=Curam .\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`For additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:`}</p>\n      <ul>\n        <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--tag`}</inlineCode>{` argument must be the application name in `}<em parentName=\"li\">{`lowercase`}</em></li>\n        <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--build-arg EAR_NAME`}</inlineCode>{` argument must be the name of the EAR file `}<em parentName=\"li\">{`without`}</em>{` the file extension (that is, for `}<inlineCode parentName=\"li\">{`Rest.ear`}</inlineCode>{`, use the value `}<inlineCode parentName=\"li\">{`Rest`}</inlineCode>{`)`}</li>\n      </ul>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-shell\"\n        }}>{`docker build \\\\\n     --tag $DOCKER_REGISTRY/citizenportal:latest \\\\\n     --file EAR.Dockerfile \\\\\n     --build-arg MQ_RA_LICENSE=--acceptLicense \\\\\n     --build-arg EAR_NAME=CitizenPortal .\n`}</code></pre>\n    </InlineNotification>\n    <ul>\n      <li parentName=\"ul\">{`To build the IBM MQ server image, run the following commands:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/dockerfiles/MQ/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/mqserver:latest \\\\\n     --file Dockerfile .\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To build the static content image, run the following commands:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/ihs:latest \\\\\n     --file StaticContent.Dockerfile .\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To build an SPM Docker image for your `}<em parentName=\"li\">{`built`}</em>{` Universal Access application:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Copy the `}<inlineCode parentName=\"li\">{`build`}</inlineCode>{` directory from the React application to `}<inlineCode parentName=\"li\">{`$SPM_HOME/dockerfiles/HTTPServer`}</inlineCode></li>\n          <li parentName=\"ul\">{`Run the following commands:`}</li>\n        </ul></li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`This is applicable only if you are licensed for `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.10/com.ibm.curam.universalaccess.doc/CitizenEngagement/ctr_CitizenEngagementApplication.html\"\n        }}>{`Universal Access`}</a></p>\n    </InlineNotification>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/ce-app:latest \\\\\n     --file CE.Dockerfile .\n`}</code></pre>\n    <h2>{`Pushing the images to the registry`}</h2>\n    <p>{`When you set up Minikube by following the steps in `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/01-prereq/minikube\"\n      }}>{`Minikube`}</a>{`, a registry was also created to store the Docker images.\nTo push the new images that you created to the registry, run the following shell script:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker push $DOCKER_REGISTRY/xmlserver:latest\ndocker push $DOCKER_REGISTRY/batch:latest\ndocker push $DOCKER_REGISTRY/curam:latest\ndocker push $DOCKER_REGISTRY/mqserver:latest\ndocker push $DOCKER_REGISTRY/ihs:latest\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`If any additional images were built (for other SPM applications or for the React application), do not forget to push the images too. For example:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-shell\"\n        }}>{`docker push $DOCKER_REGISTRY/citizenportal:latest\ndocker push $DOCKER_REGISTRY/ce-app:latest\n`}</code></pre>\n    </InlineNotification>\n    <h2>{`Pushing the images to the IBM Cloud Container Registry`}</h2>\n    <p>{`IBM Cloud Container Registry is the service to distribute the containers across Kubernetes clusters. In order to configure it, some preparation steps are\nrequired to obtain the credentials and a namespace, globally unique between all the tenants of IBM Cloud. Please refer to the IBM Cloud Container Registry\ndocumentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/docs/Registry?topic=Registry-getting-started\"\n      }}>{`here`}</a>{` for more information on configuring the registry and obtaining the required credentials.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`ibmcloud login -c <ICR_ENDPOINT> --apikey <ICR_API_KEY> -r <ICR_DC_REGION>\nibmcloud cr login\n\ndocker push us.icr.io/<ICR_NAMESPACE>/xmlserver:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/batch:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/curam:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/mqserver:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/ihs:latest\n`}</code></pre>\n    <h2>{`View the artifacts in the repository`}</h2>\n    <p>{`Confirm that the pushes to the Docker registry succeeded. Run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl http://minikube.local:5000/v2/_catalog\n`}</code></pre>\n    <p>{`The command returns the following result:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\"repositories\":[\"batch\",\"curam\",\"mqserver\",\"xmlserver\",\"ihs\"]}\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` When you shut down Minikube, you might need to repush the Docker images to the registry.`}</p>\n    </InlineNotification>\n    <p>{`For more information about the Docker Registry HTTP API, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.docker.com/registry/spec/api/\"\n      }}>{`Docker Registry HTTP API V2`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}