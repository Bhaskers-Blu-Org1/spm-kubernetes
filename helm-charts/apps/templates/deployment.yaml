{{- range $name, $app := .Values.global.apps.config }}
{{- if $app.enabled }}
---
###############################################################################
# Copyright 2019 IBM Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
###############################################################################

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "apps.fullname" $ }}-{{ $name }}
  namespace: {{ $.Release.Namespace }}
  labels:
{{ include "apps.labels" $ | indent 4 }}
spec:
  replicas: {{ $app.replicaCount | default 1 }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "apps.fullname" $ }}-{{ $name }}
      app.kubernetes.io/instance: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "apps.fullname" $ }}-{{ $name }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
    spec:
      {{- with $.Values.global.apps.common.runAs }}
      securityContext:
        runAsUser: {{ . }}
      {{- end }}
      {{- if $.Values.global.imagePullSecret.username }}
      imagePullSecrets:
        - name: {{ $.Release.Name }}-pull-secret
      {{- end }}
      restartPolicy: {{ $app.restartPolicy | default "Always" }}
      volumes:
        - name: messaging-config
          configMap:
            name: {{ $.Release.Name }}-messaging-config
        {{- if eq $name "curam" }}
        - name: load-custom-sql
          configMap:
            name: {{ $.Release.Name }}-customsql
        - name: bootstrap-file
          configMap:
            name: {{ $.Release.Name }}-bootstrap-cm
        {{- end }}
        {{- if or $.Values.global.database.ssl.secretName $.Values.tls.secretName }}
        - name: keystore-volume
          emptyDir: {}
        {{- end }}
        {{- if and (eq ($.Values.global.database.type | upper) "DB2") $.Values.global.database.ssl.enabled $.Values.global.database.ssl.secretName }}
        - name: db2-cert
          secret:
            secretName: {{ $.Values.global.database.ssl.secretName }}
        {{- end }}
        {{- if $.Values.tls.secretName }}
        - name: service-certs
          secret:
            secretName: {{ $.Release.Name }}-{{ $.Values.tls.secretName }}
        {{- end}}
        {{- with $.Values.global.apps.common.volumes }}
        {{- range . }}
        - name: {{ .name }}
          configMap:
            name: {{ $.Release.Name }}-{{ .name }}
        {{- end -}}
        {{- end }}
      initContainers:
        - name: wait-for-database
          image: busybox:1.28
          command:
            - /bin/sh
            - -c
            - >
              until nslookup {{ include "apps.dbhostname" $ }}; do
                echo waiting for {{ include "apps.dbhostname" $ }} to be available...;
                sleep 2;
              done;
              echo waiting {{ $.Values.global.database.initTime | default 120 }} additional seconds...;
              sleep {{ $.Values.global.database.initTime | default 120 }};
        - name: wait-for-mq
          image: busybox:1.28
          command:
            - /bin/sh
            - -c
            - >
              until nslookup {{ $.Release.Name }}-mqserver-{{ $name }}; do
                echo waiting for {{ $.Release.Name }}-mqserver-{{ $name }} to be available...;
                sleep 2;
              done
        {{- if and (eq ($.Values.global.database.type | upper) "DB2") $.Values.global.database.ssl.enabled $.Values.global.database.ssl.secretName }}
        - name: import-db2-cert
          image: ibmjava:8-sdk
          env:
            - name: certfile
              value: /mnt/certificates/{{ $.Values.global.database.ssl.certFile | default "db2admin.arm" }}
            - name: keystore_jks
              value: /mnt/keystores/db2TrustStore.jks
          command:
            - /bin/sh
            - -c
            - keytool -import -trustcacerts -noprompt -file $certfile -keystore $keystore_jks -storepass changeit -storetype jks
          volumeMounts:
          - name: keystore-volume
            mountPath: /mnt/keystores
          - name: db2-cert
            mountPath: /mnt/certificates
        {{- end }}
        {{- if $.Values.tls.secretName }}
        - name: import-certs-for-mq
          image: ibmjava:8-sdk
          env:
            - name: keyfile
              value: /mnt/certificates/tls.key
            - name: crtfile
              value: /mnt/certificates/tls.crt
            - name: keystore_pkcs12
              value: /tmp/tls_keystore.p12
            - name: keystore_jks
              value: /mnt/keystores/key.jks
            - name: password
              value: password
          command:
            - /bin/sh
            - -c
            - >
              openssl pkcs12 -export -inkey $keyfile -in $crtfile -out $keystore_pkcs12 -password pass:$password;
              keytool -importkeystore -noprompt -srckeystore $keystore_pkcs12 -srcstoretype pkcs12 -destkeystore $keystore_jks -storepass $password -srcstorepass $password -srcalias 1 -destalias default;
              keytool -import -trustcacerts -noprompt -alias ibmwebspheremqqm1 -file $crtfile -keystore $keystore_jks -storepass $password -storetype jks
          volumeMounts:
          - name: keystore-volume
            mountPath: /mnt/keystores
          - name: service-certs
            mountPath: /mnt/certificates
        {{- end }}
        {{- if eq $name "curam" }}
        - name: update-database-with-customsql
          image: {{ $.Values.global.images.registry }}/batch:latest
          imagePullPolicy: {{ $.Values.global.pullPolicy }}
          args:
            - -f
            - /opt/ibm/Curam/release/CuramSDEJ/util/loadsql.xml
            - -Dsql.resource=/mnt/loadsql
          volumeMounts:
            - name: load-custom-sql
              mountPath: /mnt/loadsql
            - name: bootstrap-file
              mountPath: /opt/ibm/Curam/release/project/properties/Bootstrap.properties
              subPath: Bootstrap.properties
            {{- if and (eq ($.Values.global.database.type | upper) "DB2") $.Values.global.database.ssl.enabled $.Values.global.database.ssl.secretName }}
            - name: keystore-volume
              mountPath: /mnt/keystores
            {{- end }}
        {{- end }}
        {{- if ne $name "curam" }}
        - name: wait-for-curam
          image: busybox:1.28
          command:
            - /bin/sh
            - -c
            - >
              until nslookup {{ include "apps.fullname" $ }}-curam; do
                echo waiting for {{ include "apps.fullname" $ }}-curam to be available...;
                sleep 2;
              done
              until nc -z -w3 {{ include "apps.fullname" $ }}-curam {{ $.Values.global.apps.common.port | default 8443 }}; do
                echo waiting for {{ include "apps.fullname" $ }}-curam:{{ $.Values.global.apps.common.port | default 8443 }} to be reachable...;
                sleep 2;
              done;
        {{- end }}
      containers:
        - name: {{ $.Chart.Name }}
          image: {{ $.Values.global.images.registry }}/{{ $name }}:latest
          imagePullPolicy: {{ $.Values.global.pullPolicy }}
          ports:
            - name: client
              containerPort: {{ $.Values.global.apps.common.port | default 8443 }}
          env:
            - name: MQ_SERVICE_NAME
              value: {{ $.Release.Name }}-mqserver-{{ $name }}
            {{- with $.Values.global.apps.common.environment }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .readinessPath }}
          readinessProbe:
            httpGet:
              path: {{ . }}
              port: client
              scheme: HTTPS
            initialDelaySeconds: 60
            periodSeconds: 10
          {{- end }}
          {{- if .readinessExec }}
          readinessProbe:
            exec:
              command:
              {{- range .readinessExec }}
              - {{ . }}
              {{- end }}
            initialDelaySeconds: 90
            periodSeconds: 10
          {{- end }}
          {{- if .resources }}
          {{- with .resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- else }}
          {{- with $.Values.global.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}
          volumeMounts:
            - name: messaging-config
              mountPath: /config/adc_conf/server_resources_messaging.xml
              subPath: server_resources_messaging.xml
            {{- if or $.Values.global.database.ssl.secretName $.Values.tls.secretName }}
            - name: keystore-volume
              mountPath: /output/resources/security
            {{- end }}
            {{- with $.Values.global.apps.common.volumes }}
            {{- range . }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- with .subPath }}
              subPath: {{ . }}
              {{- end }}
            {{- end -}}
            {{- end }}
{{- end }}
{{- end }}
