{"componentChunkName":"component---src-pages-03-build-images-build-images-mdx","path":"/03-build-images/build_images/","result":{"pageContext":{"frontmatter":{"title":"Building the Docker速 images","description":"Building the Docker images"},"relativePagePath":"/03-build-images/build_images.mdx","titleType":"page","MdxNode":{"id":"f208d918-a7f5-5d3e-9655-00df1d5fa1c6","children":[],"parent":"2c742f0f-77dc-59cb-b09d-182910ed42f1","internal":{"content":"---\ntitle: Building the Docker速 images\ndescription: Building the Docker images\n---\n\nNow that all the elements are in place, build the images as follows:\n\n* We will use a `$DOCKER_REGISTRY` for the commands below. Please select based on the container environment you are deploying.\n  * CRC will be `default-route-openshift-image-registry.apps-crc.testing`\n  * Minikube will be `minikube.local:5000`\n  * IKS will be `us.icr.io`\n\n* To build the XML server image, run the following commands:\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/*\\n!content/release-stage/CuramSDEJ/xmlserver' > .dockerignore\ndocker build \\\n     --tag $DOCKER_REGISTRY/xmlserver:latest \\\n     --file XMLServer.Dockerfile .\n```\n\n* To build the batch image, run the following commands:\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\n     --tag $DOCKER_REGISTRY/batch:latest \\\n     --file Batch.Dockerfile .\n```\n\n* To build the application image, run the following commands for each of the applications (EAR files) needed:\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/*\\n!content/release-stage/build\\n!content/release-stage/ear\\n!content/release-stage/CuramSDEJ' > .dockerignore\ndocker build \\\n     --tag $DOCKER_REGISTRY/curam:latest \\\n     --file EAR.Dockerfile \\\n     --build-arg MQ_RA_LICENSE=--acceptLicense \\\n     --build-arg EAR_NAME=Curam .\n```\n\n<InlineNotification>\n\nFor additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:\n\n* the value of the `--tag` argument must be the application name in _lowercase_\n* the value of the `--build-arg EAR_NAME` argument must be the name of the EAR file _without_ the file extension (that is, for `Rest.ear`, use the value `Rest`)\n\n```shell\ndocker build \\\n     --tag $DOCKER_REGISTRY/citizenportal:latest \\\n     --file EAR.Dockerfile \\\n     --build-arg MQ_RA_LICENSE=--acceptLicense \\\n     --build-arg EAR_NAME=CitizenPortal .\n```\n\n</InlineNotification>\n\n* To build the IBM MQ server image, run the following commands:\n\n```shell\ncd $SPM_HOME/dockerfiles/MQ/\ndocker build \\\n     --tag $DOCKER_REGISTRY/mqserver:latest \\\n     --file Dockerfile .\n```\n\n* To build the static content image, run the following commands:\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/ihs:latest \\\n     --file StaticContent.Dockerfile .\n```\n\n* To build an SPM Docker image for your *built* Universal Access application:\n  * Copy the `build` directory from the React application to `$SPM_HOME/dockerfiles/HTTPServer`\n  * Run the following commands:\n\n<InlineNotification>\n\nThis is applicable only if you are licensed for [Universal Access](https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.10/com.ibm.curam.universalaccess.doc/CitizenEngagement/ctr_CitizenEngagementApplication.html)\n\n</InlineNotification>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/ce-app:latest \\\n     --file CE.Dockerfile .\n```\n\n## Pushing the images to the registry\n\nWhen you set up Minikube by following the steps in [Minikube](/01-prereq/minikube), a registry was also created to store the Docker images.\nTo push the new images that you created to the registry, run the following shell script:\n\n```shell\ndocker push $DOCKER_REGISTRY/xmlserver:latest\ndocker push $DOCKER_REGISTRY/batch:latest\ndocker push $DOCKER_REGISTRY/curam:latest\ndocker push $DOCKER_REGISTRY/mqserver:latest\ndocker push $DOCKER_REGISTRY/ihs:latest\n```\n\n<InlineNotification>\n\nIf any additional images were built (for other SPM applications or for the React application), do not forget to push the images too. For example:\n\n```shell\ndocker push $DOCKER_REGISTRY/citizenportal:latest\ndocker push $DOCKER_REGISTRY/ce-app:latest\n```\n\n</InlineNotification>\n\n## Pushing the images to the IBM Cloud Container Registry\n\nIBM Cloud Container Registry is the service to distribute the containers across Kubernetes clusters. In order to configure it, some preparation steps are\nrequired to obtain the credentials and a namespace, globally unique between all the tenants of IBM Cloud. Please refer to the IBM Cloud Container Registry\ndocumentation [here](https://cloud.ibm.com/docs/Registry?topic=Registry-getting-started) for more information on configuring the registry and obtaining the required credentials.\n\n```shell\nibmcloud login -c <ICR_ENDPOINT> --apikey <ICR_API_KEY> -r <ICR_DC_REGION>\nibmcloud cr login\n\ndocker push us.icr.io/<ICR_NAMESPACE>/xmlserver:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/batch:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/curam:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/mqserver:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/ihs:latest\n```\n\n## View the artifacts in the repository\n\nConfirm that the pushes to the Docker registry succeeded. Run the following command:\n\n```shell\ncurl http://minikube.local:5000/v2/_catalog\n```\n\nThe command returns the following result:\n\n```json\n{\"repositories\":[\"batch\",\"curam\",\"mqserver\",\"xmlserver\",\"ihs\"]}\n```\n\n<InlineNotification>\n\n**Note:** When you shut down Minikube, you might need to repush the Docker images to the registry.\n\n</InlineNotification>\n\nFor more information about the Docker Registry HTTP API, see [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/).\n","type":"Mdx","contentDigest":"e654dd7c9c709a60e90bceb65b56a5f5","counter":128,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Building the Docker速 images","description":"Building the Docker images"},"exports":{},"rawBody":"---\ntitle: Building the Docker速 images\ndescription: Building the Docker images\n---\n\nNow that all the elements are in place, build the images as follows:\n\n* We will use a `$DOCKER_REGISTRY` for the commands below. Please select based on the container environment you are deploying.\n  * CRC will be `default-route-openshift-image-registry.apps-crc.testing`\n  * Minikube will be `minikube.local:5000`\n  * IKS will be `us.icr.io`\n\n* To build the XML server image, run the following commands:\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/*\\n!content/release-stage/CuramSDEJ/xmlserver' > .dockerignore\ndocker build \\\n     --tag $DOCKER_REGISTRY/xmlserver:latest \\\n     --file XMLServer.Dockerfile .\n```\n\n* To build the batch image, run the following commands:\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\n     --tag $DOCKER_REGISTRY/batch:latest \\\n     --file Batch.Dockerfile .\n```\n\n* To build the application image, run the following commands for each of the applications (EAR files) needed:\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/*\\n!content/release-stage/build\\n!content/release-stage/ear\\n!content/release-stage/CuramSDEJ' > .dockerignore\ndocker build \\\n     --tag $DOCKER_REGISTRY/curam:latest \\\n     --file EAR.Dockerfile \\\n     --build-arg MQ_RA_LICENSE=--acceptLicense \\\n     --build-arg EAR_NAME=Curam .\n```\n\n<InlineNotification>\n\nFor additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:\n\n* the value of the `--tag` argument must be the application name in _lowercase_\n* the value of the `--build-arg EAR_NAME` argument must be the name of the EAR file _without_ the file extension (that is, for `Rest.ear`, use the value `Rest`)\n\n```shell\ndocker build \\\n     --tag $DOCKER_REGISTRY/citizenportal:latest \\\n     --file EAR.Dockerfile \\\n     --build-arg MQ_RA_LICENSE=--acceptLicense \\\n     --build-arg EAR_NAME=CitizenPortal .\n```\n\n</InlineNotification>\n\n* To build the IBM MQ server image, run the following commands:\n\n```shell\ncd $SPM_HOME/dockerfiles/MQ/\ndocker build \\\n     --tag $DOCKER_REGISTRY/mqserver:latest \\\n     --file Dockerfile .\n```\n\n* To build the static content image, run the following commands:\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/ihs:latest \\\n     --file StaticContent.Dockerfile .\n```\n\n* To build an SPM Docker image for your *built* Universal Access application:\n  * Copy the `build` directory from the React application to `$SPM_HOME/dockerfiles/HTTPServer`\n  * Run the following commands:\n\n<InlineNotification>\n\nThis is applicable only if you are licensed for [Universal Access](https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.10/com.ibm.curam.universalaccess.doc/CitizenEngagement/ctr_CitizenEngagementApplication.html)\n\n</InlineNotification>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/ce-app:latest \\\n     --file CE.Dockerfile .\n```\n\n## Pushing the images to the registry\n\nWhen you set up Minikube by following the steps in [Minikube](/01-prereq/minikube), a registry was also created to store the Docker images.\nTo push the new images that you created to the registry, run the following shell script:\n\n```shell\ndocker push $DOCKER_REGISTRY/xmlserver:latest\ndocker push $DOCKER_REGISTRY/batch:latest\ndocker push $DOCKER_REGISTRY/curam:latest\ndocker push $DOCKER_REGISTRY/mqserver:latest\ndocker push $DOCKER_REGISTRY/ihs:latest\n```\n\n<InlineNotification>\n\nIf any additional images were built (for other SPM applications or for the React application), do not forget to push the images too. For example:\n\n```shell\ndocker push $DOCKER_REGISTRY/citizenportal:latest\ndocker push $DOCKER_REGISTRY/ce-app:latest\n```\n\n</InlineNotification>\n\n## Pushing the images to the IBM Cloud Container Registry\n\nIBM Cloud Container Registry is the service to distribute the containers across Kubernetes clusters. In order to configure it, some preparation steps are\nrequired to obtain the credentials and a namespace, globally unique between all the tenants of IBM Cloud. Please refer to the IBM Cloud Container Registry\ndocumentation [here](https://cloud.ibm.com/docs/Registry?topic=Registry-getting-started) for more information on configuring the registry and obtaining the required credentials.\n\n```shell\nibmcloud login -c <ICR_ENDPOINT> --apikey <ICR_API_KEY> -r <ICR_DC_REGION>\nibmcloud cr login\n\ndocker push us.icr.io/<ICR_NAMESPACE>/xmlserver:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/batch:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/curam:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/mqserver:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/ihs:latest\n```\n\n## View the artifacts in the repository\n\nConfirm that the pushes to the Docker registry succeeded. Run the following command:\n\n```shell\ncurl http://minikube.local:5000/v2/_catalog\n```\n\nThe command returns the following result:\n\n```json\n{\"repositories\":[\"batch\",\"curam\",\"mqserver\",\"xmlserver\",\"ihs\"]}\n```\n\n<InlineNotification>\n\n**Note:** When you shut down Minikube, you might need to repush the Docker images to the registry.\n\n</InlineNotification>\n\nFor more information about the Docker Registry HTTP API, see [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/).\n","fileAbsolutePath":"/home/travis/build/IBM/spm-kubernetes/src/pages/03-build-images/build_images.mdx"}}}}