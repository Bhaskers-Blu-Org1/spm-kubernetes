{"componentChunkName":"component---src-pages-04-deployment-hc-deployment-mdx","path":"/04-deployment/hc_deployment/","result":{"pageContext":{"frontmatter":{"title":"Deploying Helm charts","description":"Deploying Helm charts"},"relativePagePath":"/04-deployment/hc_deployment.mdx","titleType":"page","MdxNode":{"id":"59d0cafa-60a3-52d1-bcea-2282f3e2358d","children":[],"parent":"2315500b-47b1-5d39-a96a-3df776b6eac6","internal":{"content":"---\ntitle: Deploying Helm charts\ndescription: Deploying Helm charts\n---\n\n\nWhen the Helm charts are uploaded to the repository, you can deploy the application by using one of the following commands:\n\n```shell\n# Helm v2\nhelm install local-development/spm --name releasename\n\n# Helm v3 ('releasename' is mandatory for Helm v3)\nhelm install releasename local-development/spm\n```\n\n<InlineNotification>\n\n**Note**: releasename should contain no capital letters.\n\n</InlineNotification>\n\nWhere `releasename` is the name of this Helm release. For example, MyRelease-1.0.\nIf you do not specify a name, Helm auto generates one. All the names of the Kubernetes objects are created with `releasename-` as prefix.\n\nThe `helm install` command installs the Helm charts in the order in which they were loaded in the repository, with all the values defined in the files.\nHowever, as described in [Setting up the Docker® context](/03-build-images/setup_docker_context), you can override the configuration value by running the following shell script:\n\n```shell\n# Helm v2\nhelm install local-development/spm --name releasename -f override-values.yaml\n\n# Helm v3\nhelm install releasename local-development/spm -f override-values.yaml\n```\n\n### Sample `override-values.yaml` files\n\nHere are three sample override files for deploying.\n\n<InlineNotification>\n\nWhile the Minikube configuration is sufficiently generic to be used almost as-is (given all images were built and pushed with the names outlined in the [Building Docker images](/03-build-images/build_images) section):\n\n* The IKS example requires IAM credentials for the [IBM Container Registry](https://cloud.ibm.com/docs/containers?topic=containers-registry) (`global.imagePullSecret`)\n* The [Application Load Balancer IDs](https://cloud.ibm.com/docs/containers?topic=containers-ingress_annotation#alb-id) (`ingress.annotations.\"ingress.bluemix.net/ALB-ID\"`) to be updated.\n\n</InlineNotification>\n\n<Tabs>\n\n<Tab label=\"Minikube\">\n<Row>\n<Column>\n\n```yaml path=minikube-values.yaml src=../../resources/minikube-values.yaml\n---\nglobal:\n  license: '' # Set to 'accept' after reviewing all license agreements\n  images:\n    registry: minikube.local\n    imageLibrary: ''\n    imagePrefix: ''\n    imageTag: latest\n    pullPolicy: Always\n  ceApp:\n    imageLibrary: ''\n    imageName: ce-app\n    imageTag: latest\n  apps:\n    common:\n      initialDelaySeconds: 60\n      security:\n        username: SYSTEM\n    config:\n      curam:\n        enabled: true\n        resources:\n          limits:\n            cpu: 2\n            memory: 4Gi\n          requests:\n            cpu: 1\n            memory: 2Gi\n      rest:\n        enabled: false\n      citizenportal:\n        enabled: false\n      curamwebservices:\n        enabled: false\n      curambirtviewer:\n        enabled: false\ningress:\n  enabled: true\n  tlsSecretName: testkube-tls\n  generateCert: true\n  hostname: minikube.local\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"IBM Kubernetes Service\">\n<Row>\n<Column>\n\n```yaml path=iks-values.yaml src=../../resources/iks-values.yaml\n---\nglobal:\n  license: '' # Set to 'accept' after reviewing all license agreements\n  images:\n    registry: us.icr.io\n    imageLibrary: foo-library\n    imagePrefix: test_\n    imageTag: latest\n    pullPolicy: Always\n  ceApp:\n    imageLibrary: foo-library\n    imageName: ce-app\n    imageTag: latest\n  imagePullSecret:\n    registry: us.icr.io\n    username: '' # IAM username for IBM Container Registry\n    password: '' # IAM API Key for IBM Container Registry\n  database:\n    initTime: 30\n  apps:\n    common:\n      initialDelaySeconds: 60\n      security:\n        username: SYSTEM\n    config:\n      curam:\n        enabled: true\n        resources:\n          limits:\n            cpu: 2\n            memory: 4Gi\n          requests:\n            cpu: 1\n            memory: 2Gi\n      rest:\n        enabled: false\n      citizenportal:\n        enabled: false\n      curamwebservices:\n        enabled: false\n      curambirtviewer:\n        enabled: false\ningress:\n  annotations:\n    ingress.bluemix.net/ALB-ID: ''\n  enabled: true\n  hostname: spm.<cluster_name>-<hash>-0000.<region>.containers.appdomain.cloud\n  tlsSecretName: default-us-icr-io\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"CodeReady Containers\">\n<Row>\n<Column>\n\n```yaml path=crc-values.yaml src=../../resources/crc-values.yaml\n---\nglobal:\n  license: 'accept' # Set to 'accept' after reviewing all license agreements\n  images:\n    registry: &imageRegistry image-registry.openshift-image-registry.svc:5000\n    imageLibrary: 'ocp'\n    imagePrefix: ''\n    imageTag: latest\n    pullPolicy: Always\n  imagePullSecret:\n    registry: *imageRegistry\n    username: kubeadmin\n    password:\n  database:\n    hostname: 192.168.0.32\n  ceApp:\n    imageLibrary: ''\n    imageName: ''\n    imageTag: latest\n  apps:\n    common:\n      initialDelaySeconds: 60\n      security:\n        username: SYSTEM\n    config:\n      curam:\n        enabled: true\n        resources:\n          limits:\n            cpu: 2\n            memory: 4Gi\n          requests:\n            cpu: 1\n            memory: 2Gi\n      rest:\n        enabled: false\n      citizenportal:\n        enabled: false\n      curamwebservices:\n        enabled: false\n      curambirtviewer:\n        enabled: false\n  isam:\n    enabled: false\n  ingress:\n    enabled: true\n    tlsSecretName: testkube-tls\n    generateCert: true\n    hostname: spm-ocp.apps-crc.testing\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n<InlineNotification>\n\nThe above example of configuration for IKS will build up the full image name based on the `registry`, `imageLibrary`, `imagePrefix`, and `imageTag` options as follows: `{registry}/{imageLibrary}/{imagePrefix}curam:{imageTag}`\n\nWith the given values, the resulting image name will look like this: `us.icr.io/foo-library/test_curam:latest`\n\n</InlineNotification>\n\nThe license agreements for the IBM® WebSphere® Liberty and IBM WebSphere MQ images must be accepted in order to proceed with the deployment of these elements. This can be done by setting the `global.license` property to `accept`.\n\nThe respective license agreements can be reviewed by running the following commands:\n\n```shell\n# IBM WebSphere Liberty\ndocker run --rm -e LICENSE=view websphere-liberty:19.0.0.12-full-java8-ibmjava\n\n# IBM WebSphere MQ\ndocker run --rm -e LICENSE=view ibmcom/mq:9.1.3.0\n```\n\n## Status of the system\n\nThe `helm install` command shows all the Kubernetes objects and also runs the SPM containers. You can track the status of the SPM containers on real time by running the following command:\n\n```shell\nkubectl get pods -w\n\nNAME                                              READY  STATUS    RESTARTS  AGE\nreleasename-apps-curam-consumer-595c8bf95f-zn2l5  0/1    Init 3/4  0         5m\nreleasename-apps-curam-producer-6b5569c4ff-nvxtd  1/1    Running   0         5m\nreleasename-apps-rest-consumer-85b4865b9d-wr6hj   0/1    Init 3/4  0         5m\nreleasename-apps-rest-producer-cd8fdbbbf-j2mjj    0/1    Init 3/4  0         5m\nreleasename-ce-app-7cdd64987-qx8l8                1/1    Running   0         5m\nreleasename-ihs-67697ffb8b-fdsk2                  1/1    Running   0         5m\nreleasename-mqserver-curam-7f45bcd64d-rlqns       1/1    Running   0         5m\nreleasename-mqserver-rest-544c5b4758-pnbpz        1/1    Running   0         5m\nreleasename-xmlserver-77d6d9b75d-4xr8k            1/1    Running   0         5m\n\n```\n\nThe command lists the pods and their status, where each status change is on a new line.\n\nSome of the pods have initialization steps, so they are not shown until the steps are completed.\n\nThe output of the `kubectl get pods` command provides the names of the pods that you can use to substitute for `podname` in the following example commands.\nFor example, the Liberty pod that contains SPM code is a name that uses a pattern of: `releasename-apps-curam-`.\n\nYou can also describe a pod by running the following command:\n\n```shell\nkubectl describe pod/pod name\n```\n\nYou can also read the log when the status is `running`, by running the following command:\n\n```shell\nkubectl logs -f pod/podname\n```\n\n## Accessing the application\n\nTo access the application, a URL is provided to access the pod within the cluster. This access is provided using Ingress resources on Kubernetes, and Routes resources on OpenShift.\n\nExample URLs:\n\n* Minikube: `https://minikube.local/Curam`\n* CRC: `https://spm-ocp.apps-crc.testing/Curam`\n* IKS: `https://spm.<cluster_name>-<hash>-0000.<region>.containers.appdomain.cloud/Curam`\n","type":"Mdx","contentDigest":"fac90c45fa401714649924878c0add8a","counter":130,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Deploying Helm charts","description":"Deploying Helm charts"},"exports":{},"rawBody":"---\ntitle: Deploying Helm charts\ndescription: Deploying Helm charts\n---\n\n\nWhen the Helm charts are uploaded to the repository, you can deploy the application by using one of the following commands:\n\n```shell\n# Helm v2\nhelm install local-development/spm --name releasename\n\n# Helm v3 ('releasename' is mandatory for Helm v3)\nhelm install releasename local-development/spm\n```\n\n<InlineNotification>\n\n**Note**: releasename should contain no capital letters.\n\n</InlineNotification>\n\nWhere `releasename` is the name of this Helm release. For example, MyRelease-1.0.\nIf you do not specify a name, Helm auto generates one. All the names of the Kubernetes objects are created with `releasename-` as prefix.\n\nThe `helm install` command installs the Helm charts in the order in which they were loaded in the repository, with all the values defined in the files.\nHowever, as described in [Setting up the Docker® context](/03-build-images/setup_docker_context), you can override the configuration value by running the following shell script:\n\n```shell\n# Helm v2\nhelm install local-development/spm --name releasename -f override-values.yaml\n\n# Helm v3\nhelm install releasename local-development/spm -f override-values.yaml\n```\n\n### Sample `override-values.yaml` files\n\nHere are three sample override files for deploying.\n\n<InlineNotification>\n\nWhile the Minikube configuration is sufficiently generic to be used almost as-is (given all images were built and pushed with the names outlined in the [Building Docker images](/03-build-images/build_images) section):\n\n* The IKS example requires IAM credentials for the [IBM Container Registry](https://cloud.ibm.com/docs/containers?topic=containers-registry) (`global.imagePullSecret`)\n* The [Application Load Balancer IDs](https://cloud.ibm.com/docs/containers?topic=containers-ingress_annotation#alb-id) (`ingress.annotations.\"ingress.bluemix.net/ALB-ID\"`) to be updated.\n\n</InlineNotification>\n\n<Tabs>\n\n<Tab label=\"Minikube\">\n<Row>\n<Column>\n\n```yaml path=minikube-values.yaml src=../../resources/minikube-values.yaml\n---\nglobal:\n  license: '' # Set to 'accept' after reviewing all license agreements\n  images:\n    registry: minikube.local\n    imageLibrary: ''\n    imagePrefix: ''\n    imageTag: latest\n    pullPolicy: Always\n  ceApp:\n    imageLibrary: ''\n    imageName: ce-app\n    imageTag: latest\n  apps:\n    common:\n      initialDelaySeconds: 60\n      security:\n        username: SYSTEM\n    config:\n      curam:\n        enabled: true\n        resources:\n          limits:\n            cpu: 2\n            memory: 4Gi\n          requests:\n            cpu: 1\n            memory: 2Gi\n      rest:\n        enabled: false\n      citizenportal:\n        enabled: false\n      curamwebservices:\n        enabled: false\n      curambirtviewer:\n        enabled: false\ningress:\n  enabled: true\n  tlsSecretName: testkube-tls\n  generateCert: true\n  hostname: minikube.local\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"IBM Kubernetes Service\">\n<Row>\n<Column>\n\n```yaml path=iks-values.yaml src=../../resources/iks-values.yaml\n---\nglobal:\n  license: '' # Set to 'accept' after reviewing all license agreements\n  images:\n    registry: us.icr.io\n    imageLibrary: foo-library\n    imagePrefix: test_\n    imageTag: latest\n    pullPolicy: Always\n  ceApp:\n    imageLibrary: foo-library\n    imageName: ce-app\n    imageTag: latest\n  imagePullSecret:\n    registry: us.icr.io\n    username: '' # IAM username for IBM Container Registry\n    password: '' # IAM API Key for IBM Container Registry\n  database:\n    initTime: 30\n  apps:\n    common:\n      initialDelaySeconds: 60\n      security:\n        username: SYSTEM\n    config:\n      curam:\n        enabled: true\n        resources:\n          limits:\n            cpu: 2\n            memory: 4Gi\n          requests:\n            cpu: 1\n            memory: 2Gi\n      rest:\n        enabled: false\n      citizenportal:\n        enabled: false\n      curamwebservices:\n        enabled: false\n      curambirtviewer:\n        enabled: false\ningress:\n  annotations:\n    ingress.bluemix.net/ALB-ID: ''\n  enabled: true\n  hostname: spm.<cluster_name>-<hash>-0000.<region>.containers.appdomain.cloud\n  tlsSecretName: default-us-icr-io\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"CodeReady Containers\">\n<Row>\n<Column>\n\n```yaml path=crc-values.yaml src=../../resources/crc-values.yaml\n---\nglobal:\n  license: 'accept' # Set to 'accept' after reviewing all license agreements\n  images:\n    registry: &imageRegistry image-registry.openshift-image-registry.svc:5000\n    imageLibrary: 'ocp'\n    imagePrefix: ''\n    imageTag: latest\n    pullPolicy: Always\n  imagePullSecret:\n    registry: *imageRegistry\n    username: kubeadmin\n    password:\n  database:\n    hostname: 192.168.0.32\n  ceApp:\n    imageLibrary: ''\n    imageName: ''\n    imageTag: latest\n  apps:\n    common:\n      initialDelaySeconds: 60\n      security:\n        username: SYSTEM\n    config:\n      curam:\n        enabled: true\n        resources:\n          limits:\n            cpu: 2\n            memory: 4Gi\n          requests:\n            cpu: 1\n            memory: 2Gi\n      rest:\n        enabled: false\n      citizenportal:\n        enabled: false\n      curamwebservices:\n        enabled: false\n      curambirtviewer:\n        enabled: false\n  isam:\n    enabled: false\n  ingress:\n    enabled: true\n    tlsSecretName: testkube-tls\n    generateCert: true\n    hostname: spm-ocp.apps-crc.testing\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n<InlineNotification>\n\nThe above example of configuration for IKS will build up the full image name based on the `registry`, `imageLibrary`, `imagePrefix`, and `imageTag` options as follows: `{registry}/{imageLibrary}/{imagePrefix}curam:{imageTag}`\n\nWith the given values, the resulting image name will look like this: `us.icr.io/foo-library/test_curam:latest`\n\n</InlineNotification>\n\nThe license agreements for the IBM® WebSphere® Liberty and IBM WebSphere MQ images must be accepted in order to proceed with the deployment of these elements. This can be done by setting the `global.license` property to `accept`.\n\nThe respective license agreements can be reviewed by running the following commands:\n\n```shell\n# IBM WebSphere Liberty\ndocker run --rm -e LICENSE=view websphere-liberty:19.0.0.12-full-java8-ibmjava\n\n# IBM WebSphere MQ\ndocker run --rm -e LICENSE=view ibmcom/mq:9.1.3.0\n```\n\n## Status of the system\n\nThe `helm install` command shows all the Kubernetes objects and also runs the SPM containers. You can track the status of the SPM containers on real time by running the following command:\n\n```shell\nkubectl get pods -w\n\nNAME                                              READY  STATUS    RESTARTS  AGE\nreleasename-apps-curam-consumer-595c8bf95f-zn2l5  0/1    Init 3/4  0         5m\nreleasename-apps-curam-producer-6b5569c4ff-nvxtd  1/1    Running   0         5m\nreleasename-apps-rest-consumer-85b4865b9d-wr6hj   0/1    Init 3/4  0         5m\nreleasename-apps-rest-producer-cd8fdbbbf-j2mjj    0/1    Init 3/4  0         5m\nreleasename-ce-app-7cdd64987-qx8l8                1/1    Running   0         5m\nreleasename-ihs-67697ffb8b-fdsk2                  1/1    Running   0         5m\nreleasename-mqserver-curam-7f45bcd64d-rlqns       1/1    Running   0         5m\nreleasename-mqserver-rest-544c5b4758-pnbpz        1/1    Running   0         5m\nreleasename-xmlserver-77d6d9b75d-4xr8k            1/1    Running   0         5m\n\n```\n\nThe command lists the pods and their status, where each status change is on a new line.\n\nSome of the pods have initialization steps, so they are not shown until the steps are completed.\n\nThe output of the `kubectl get pods` command provides the names of the pods that you can use to substitute for `podname` in the following example commands.\nFor example, the Liberty pod that contains SPM code is a name that uses a pattern of: `releasename-apps-curam-`.\n\nYou can also describe a pod by running the following command:\n\n```shell\nkubectl describe pod/pod name\n```\n\nYou can also read the log when the status is `running`, by running the following command:\n\n```shell\nkubectl logs -f pod/podname\n```\n\n## Accessing the application\n\nTo access the application, a URL is provided to access the pod within the cluster. This access is provided using Ingress resources on Kubernetes, and Routes resources on OpenShift.\n\nExample URLs:\n\n* Minikube: `https://minikube.local/Curam`\n* CRC: `https://spm-ocp.apps-crc.testing/Curam`\n* IKS: `https://spm.<cluster_name>-<hash>-0000.<region>.containers.appdomain.cloud/Curam`\n","fileAbsolutePath":"/home/travis/build/IBM/spm-kubernetes/src/pages/04-deployment/hc_deployment.mdx"}}}}